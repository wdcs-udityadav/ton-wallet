#include "imports/stdlib.fc";

const min_balance = 10000000;                           ;; 0.01 TON

(slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return ds~load_msg_addr();                          ;; owner_address
}

() save_data(slice owner_address) impure inline {
    set_data(
        begin_cell()
        .store_slice(owner_address)
        .end_cell()
    );
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    slice sender_address = cs~load_msg_addr();
    
    if(in_msg_body.slice_empty?()) {
        return ();
    }
    int op = in_msg_body~load_uint(32);

    slice owner_address = load_data();

    if (op == 1) {                                  ;; deposit
        return();

    } elseif (op == 2) {                            ;; withdraw
        throw_unless(101, equal_slice_bits(sender_address, owner_address));

        int withdraw_amount = in_msg_body~load_coins();
        var [balance, _] = get_balance();
        throw_unless(102, balance >= withdraw_amount);

        int min_value = min(withdraw_amount, balance - min_balance);
        
        cell message = begin_cell()
                    .store_uint(0x18, 6)
                    .store_slice(sender_address)    ;; destination
                    .store_coins(min_value)         ;; amount to withdraw
                    .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                    .end_cell();

        int mode = 3;

        send_raw_message(message, mode);
        return();

    } else {
        throw(888);
    }
}

(slice, int) get_contract_storage() method_id {
    slice owner_address = load_data();
    var [balance, _] = get_balance();
    return (owner_address, balance);
}